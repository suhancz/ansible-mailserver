---
- name: Get latest PowerAdmin version
  tags:
    - dyndns
    - poweradmin
  when: 'public_dns == "yes"'
  block:
    # - name: Get URL for latest release
    #   uri:
    #     url: https://github.com/poweradmin/poweradmin/releases/latest
    #   register: poweradmin_download_site
    - name: Parse version
      ansible.builtin.set_fact:
        # poweradmin_version: "{{ poweradmin_download_site.url | replace('https://github.com/poweradmin/poweradmin/releases/tag/v','') }}"
        poweradmin_version: 3.4.2 # enforcing PowerAdmin with a verion which supports PHP 7 to avoid package clash with other packages
- name: Unpack PowerAdmin
  tags:
    - dyndns
    - poweradmin
  ansible.builtin.unarchive:
    src: "https://github.com/poweradmin/poweradmin/archive/v{{ poweradmin_version }}.tar.gz"
    dest: /var/www/
    remote_src: yes
  when: 'public_dns == "yes"'
- name: Rename PowerAdmin directory
  tags:
    - dyndns
    - poweradmin
  ansible.builtin.command: "mv /var/www/poweradmin-{{ poweradmin_version }} /var/www/poweradmin"
  args:
    creates: /var/www/poweradmin
  when: 'public_dns == "yes"'
- name: Set up PowerAdmin permissions
  tags:
    - dyndns
    - poweradmin
  ansible.builtin.file:
    path: /var/www/poweradmin
    state: directory
    owner: apache
    group: apache
    recurse: yes
  when: 'public_dns == "yes"'
- name: Generate PowerAdmin session key
  tags:
    - dyndns
    - poweradmin
  ansible.builtin.set_fact:
    poweradmin_session_key: "{{ poweradmin_session_key | default(lookup('password', '/tmp/ansible-mailserver-install.poweradmin_session_key chars=ascii_lowercase,ascii_uppercase,digits,@,#,$,%,^,*,(,),_,-,! length=46')) }}"
  no_log: yes
  when: 'public_dns == "yes"'
- name: "Add PowerAdmin user"
  tags:
    - dyndns
    - poweradmin
  community.mysql.mysql_user:
    name: '{{ mailserver_admin_user }}@{{ mailserver_domain }}'
    password: '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password }}{% endif %}{% endfor %}'
    priv: 'powerdnsdb.*:SELECT,INSERT,UPDATE,DELETE'
    host: localhost
    login_user: root
    login_password: '{{ mysql_root_password }}'
  no_log: yes
  when: 'public_dns == "yes"'
  notify: Warn on passwords
- name: Fill PowerDNS DB with PowerAdmin data
  tags:
    - dyndns
    - poweradmin
  block:
    - name: Fill PowerDNS DB with PowerAdmin data using Blowfish 2y ident
      community.mysql.mysql_query:
        login_db: powerdnsdb
        login_user: '{{ mailserver_admin_user }}@{{ mailserver_domain }}'
        login_password: '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password }}{% endif %}{% endfor %}'
        query:
          - REPLACE INTO `perm_templ` (`id`, `name`, `descr`) VALUES (1, 'Administrator', 'Administrator template with full rights.')
          - REPLACE INTO `perm_items` (`id`, `name`, `descr`) VALUES (1, 'Administrator', 'Administrator template with full rights.')
          - REPLACE INTO `perm_templ_items` (`id`, `templ_id`, `perm_id`) VALUES (1, 1, 53)
          - REPLACE INTO `users` (`id`, `username`, `password`, `fullname`, `email`, `description`, `perm_templ`, `active`, `use_ldap`) VALUES (1, 'admin', '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password | password_hash("blowfish") | replace("$2b$", "$2y$") }}{% endif %}{% endfor %}', 'Administrator', 'hostmaster@{{ mailserver_domain }}', 'Administrator with full rights.', 1, 1, 0)
      no_log: yes
      when: 'public_dns == "yes"'
      notify: Warn on passwords
  rescue:
    - name: Fill PowerDNS DB with PowerAdmin data replacing Blowfish 2b ident with 2y
      mysql_query:
        login_db: powerdnsdb
        login_user: '{{ mailserver_admin_user }}@{{ mailserver_domain }}'
        login_password: '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password }}{% endif %}{% endfor %}'
        query:
          - REPLACE INTO `perm_templ` (`id`, `name`, `descr`) VALUES (1, 'Administrator', 'Administrator template with full rights.')
          - REPLACE INTO `perm_items` (`id`, `name`, `descr`) VALUES (1, 'Administrator', 'Administrator template with full rights.')
          - REPLACE INTO `users` (`id`, `username`, `password`, `fullname`, `email`, `description`, `perm_templ`, `active`, `use_ldap`) VALUES (1, 'admin', '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password | password_hash("blowfish") | replace("$2b$", "$2y$") }}{% endif %}{% endfor %}', 'Administrator', 'hostmaster@{{ mailserver_domain }}', 'Administrator with full rights.', 1, 1, 0)
          - REPLACE INTO `perm_templ_items` (`id`, `templ_id`, `perm_id`) VALUES (1, 1, 53)
      no_log: yes
      when: 'public_dns == "yes"'
      notify: Warn on passwords
- name: Render PowerAdmin config
  tags:
    - dyndns
    - poweradmin
  ansible.builtin.template:
    src: poweradmin/config.inc.php.j2
    dest: /var/www/poweradmin/inc/config.inc.php
    mode: ug=rw,o=r
    owner: apache
    group: apache
    backup: yes
  no_log: yes
  when: 'public_dns == "yes"'
- name: Remove install directory
  tags:
    - poweradmin
  ansible.builtin.file:
    path: /var/www/poweradmin/install/
    state: absent
  when: 'public_dns == "yes"'
