---
- name: Open firewall
  include: firewall.yml
  vars:
    port: "{{ wireguard.listen_port }}/udp"
- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  loop:
    - wireguard
    - iptable_nat
    - ip6table_nat
- name: Load kernel modules at boot
  lineinfile:
    path: "/etc/modules-load.d/{{ item }}.conf"
    line: "{{ item }}"
    create: yes
    backup: yes
  loop:
    - wireguard
    - iptable_nat
    - ip6table_nat
- name: Set sysctl variables
  sysctl:
    name: "{{ item }}"
    value: 1
    state: present # not required. choices: present;absent. Whether the entry should be present or absent in the sysctl file.
    ignoreerrors: no # not required. Use this option to ignore errors about unknown keys.
    reload: yes # not required. If C(yes), performs a I(/sbin/sysctl -p) if the C(sysctl_file) is updated. If C(no), does not reload I(sysctl) even if the C(sysctl_file) is updated.
    sysctl_set: yes
  loop:
    - "net.ipv4.ip_forward"
    - "net.ipv6.conf.all.forwarding"
- name: Create WireGard UI config directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/podman
    - /etc/podman/compose
    # - /etc/podman/compose/subspace
    # - /etc/podman/compose/wireguard-ui
    # - /etc/podman/compose/wireguard-ui/db
    # - /etc/podman/compose/wg-easy
    - /etc/podman/compose/wg-manager
    - "{{ wireguard.config_dir }}"
  # notify: Restart subspace
  notify: Restart WireGuard
- name: BindFS mount the WireGuard UI directory
  mount:
    path: "{{ wireguard.config_dir }}"
    src: /etc/wireguard
    opts: map=root/apache:@root/@apache,perms=u=rwX:g=rwX,
    state: mounted
    fstype: fuse.bindfs
# - name: Allow Apache to reach the WireGuard UI directory
#   acl:
#     path: "{{ wireguard.config_dir }}"
#     entity: apache
#     etype: user
#     permissions: rwX
#     state: present
#     recursive: yes
- name: Render wg-manager server init interface JSON
  template:
    src: wg-manager/server_init_interface.json.j2
    dest: /etc/podman/compose/wg-manager/server_init_interface.json
    backup: yes
- name: Slurp wg-manager server init interface JSON
  slurp:
    src: /etc/podman/compose/wg-manager/server_init_interface.json
  register: server_init_interface_json
- name: Deploy docker-compose.yaml
  template:
    # src: subspace/docker-compose.yaml.j2
    # dest: /etc/podman/compose/subspace/docker-compose.yaml
    # src: wireguard-ui/docker-compose.yaml.j2
    # dest: /etc/podman/compose/wireguard-ui/docker-compose.yaml
    # src: wg-easy/docker-compose.yaml.j2
    # dest: /etc/podman/compose/wg-easy/docker-compose.yaml
    src: wg-manager/docker-compose.yaml.j2
    dest: /etc/podman/compose/wg-manager/docker-compose.yaml
    backup: yes
  # notify: Restart subspace
  notify: Restart WireGuard
# - name: Deploy wg.conf template
#   copy:
#     src: wireguard-ui/wg.conf.tmpl
#     dest: /etc/podman/compose/wireguard-ui/db/wg.conf.tmpl
#     backup: yes
#   notify: Restart WireGuard
- name: Deploy systemd path watcher
  copy:
    src: "systemd/{{ item }}"
    dest: "/etc/systemd/system/{{ item }}"
    backup: yes
  notify: Restart WireGuard
  loop: 
    - wgui.path
    - wgui.service
