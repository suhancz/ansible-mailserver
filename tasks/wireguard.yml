---
- name: Open firewall
  include: firewall.yml
  vars:
    port: "{{ wireguard.listen_port }}/udp"
- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  loop:
    - wireguard
    - iptable_nat
    - ip6table_nat
- name: Load kernel modules at boot
  lineinfile:
    path: "/etc/modules-load.d/{{ item }}.conf"
    line: "{{ item }}"
    create: yes
    backup: yes
  loop:
    - wireguard
    - iptable_nat
    - ip6table_nat
- name: Set sysctl variables
  sysctl:
    name: "{{ item }}"
    value: 1
    state: present # not required. choices: present;absent. Whether the entry should be present or absent in the sysctl file.
    ignoreerrors: no # not required. Use this option to ignore errors about unknown keys.
    reload: yes # not required. If C(yes), performs a I(/sbin/sysctl -p) if the C(sysctl_file) is updated. If C(no), does not reload I(sysctl) even if the C(sysctl_file) is updated.
    sysctl_set: yes
  loop:
    - "net.ipv4.ip_forward"
    - "net.ipv6.conf.all.forwarding"
- name: Create WireGuard config directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - /etc/wireguard/clients
    - "{{ wireguard.config_dir }}"
  notify: Restart WireGuard
- name: BindFS mount the WireGuard directory
  mount:
    path: "{{ wireguard.config_dir }}"
    src: /etc/wireguard
    opts: map=root/apache:@root/@apache,perms=u=rwX:g=rwX,
    state: mounted
    fstype: fuse.bindfs
- name: Deploy .htaccess for the WireGuard configs
  template:
    src: wireguard/htaccess.j2
    dest: /etc/wireguard/.htaccess
    backup: yes
- name: Read WireGuard server config
  include: read_wireguard_config.yml
  vars:
    wg_config_file: "{{ wireguard.config_dir }}/{{ wireguard.interface }}.conf"
- name: Define read server values
  set_fact:
    wg_server:
      privatekey: "{{ wg_interface.PrivateKey|default('') }}"
      publickey: "{{ wg_peer.PublicKey|default('') }}"
      psk: "{{ wg_peer.PresharedKey|default('') }}"
- name: Set WireGuard server config
  set_fact:
    wg_server: "{{ wg_server|default({})|combine(wireguard.server|default({}), recursive=True) }}"
- name: Set the next client's last IP segment
  set_fact:
    next_ip_segment: 2
- name: Generate WireGuard server keys
  include_tasks: generate_wireguard_keys.yml
  vars:
    wg_name: "server"
    wg_privatekey: "{{ wg_server.privatekey|default('') }}"
    wg_publickey: "{{ wg_server.publickey|default('') }}"
- name: Define read client values #TODO: read client configs
  include_tasks: define_vpn_clients.yml
  vars:
    current_ipv4: "{{ wireguard.ipv4_pool.split('/')|first|replace('.0',next_ip_segment) }}"
    current_ipv6: "{{ wireguard.ipv6_pool.split('/')|first|replace(':0',next_ip_segment) }}"
    vpn_client_data: "{{ item.vpn|default([{'name': item.name, 'cidr': current_ipv4 ~ ', ' ~ current_ipv6 }]) }}"
    vpn_client_owner: "{{ item.name }}"
  loop: "{{ users }}"
- name: Generate WireGuard client keys
  include_tasks: generate_wireguard_keys.yml
  vars:
    wg_name: "{{ item.name }}"
    wg_privatekey: "{{ item.privatekey|default('') }}"
    wg_publickey: "{{ item.publickey|default('') }}"
    wg_psk: "{{ item.psk|default('') }}"
  loop: "{{ wg_clients|dict2items }}"
- name: Generate server config
  template:
    src: server.conf.j2
    dest: "{{ wireguard.config_dir }}/{{ wireguard.interface }}.conf"
    backup: yes
  notify: Restart WireGuard
- name: Create client config dirs
  file:
    state: directory
    name: "{{ wireguard.config_dir }}/clients/{{ item.key }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Generate client configs
  template:
    src: client.conf.j2
    dest: "{{ wireguard.config_dir }}/clients/{{ item.key }}/wg0.conf"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    backup: yes
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Ensure user VPN config directories exist
  file:
    path: "{{ ansible_env.HOME }}/{{ item.owner }}/public_html/.vpn"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    state: directory
  become: true
  become_user: "{{ item.owner }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Allow access to VPN configs
  file:
    src: "{{ wireguard.config_dir }}/clients/{{ item.key }}"
    dest: "{{ ansible_env.HOME }}/{{ item.owner }}/public_html/.vpn/{{ item.key }}"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    state: link
  become: true
  become_user: "{{ item.owner }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Generate QR codes
  command: "qrencode -o {{ wireguard.config_dir }}/clients/{{ item.key }}/wg0.png -r {{ wireguard.config_dir }}/clients/{{ item.key }}/wg0.conf"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
  become: yes
  become_user: "{{ item.owner }}"
- name: Add DynDNS root A record
  include: add_dns_record.yml
  vars:
    record:
      zone: "dyndns.{{ mailserver_domain }}"
      name: "@"
      ttl: "3600"
      type: A
      content: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
- name: Add DynDNS root AAAA record
  include: add_dns_record.yml
  vars:
    record:
      zone: "dyndns.{{ mailserver_domain }}"
      name: "@"
      ttl: "3600"
      type: AAAA
      content: "{{ hostvars[inventory_hostname]['ansible_default_ipv6']['address'] }}"
- name: Add DynDNS A records
  include: add_dns_record.yml
  vars:
    record:
      zone: "dyndns.{{ mailserver_domain }}"
      name: "{{ item.key }}"
      ttl: "3600"
      type: A
      content: "{{ item.value.cidr.split(', ')|first }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
  become: yes
  become_user: "{{ item.owner }}"
- name: Add DynDNS AAAA records
  include: add_dns_record.yml
  vars:
    record:
      zone: "dyndns.{{ mailserver_domain }}"
      name: "{{ item.key }}"
      ttl: "3600"
      type: AAAA
      content: "{{ item.value.cidr.split(', ')|last }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
  become: yes
  become_user: "{{ item.owner }}"
- name: Add VPN root A record
  include: add_dns_record.yml
  vars:
    record:
      zone: "vpn.{{ mailserver_domain }}"
      name: "@"
      ttl: "3600"
      type: A
      content: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
- name: Add VPN root AAAA record
  include: add_dns_record.yml
  vars:
    record:
      zone: "vpn.{{ mailserver_domain }}"
      name: "@"
      ttl: "3600"
      type: AAAA
      content: "{{ hostvars[inventory_hostname]['ansible_default_ipv6']['address'] }}"
- name: Add VPN A records
  include: add_dns_record.yml
  vars:
    record:
      zone: vpn.{{ mailserver_domain }}"
      name: "{{ item.key }}"
      ttl: "3600"
      type: A
      content: "{{ item.value.cidr.split(', ')|first }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
  become: yes
  become_user: "{{ item.owner }}"
- name: Add VPN AAAA records
  include: add_dns_record.yml
  vars:
    record:
      zone: "vpn.{{ mailserver_domain }}"
      name: "{{ item.key }}"
      ttl: "3600"
      type: AAAA
      content: "{{ item.value.cidr.split(', ')|last }}"
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
  become: yes
  become_user: "{{ item.owner }}"
- name: Generate BASH DynDNS clients
  template:
    src: dyndns/dynamic_dns_client.sh.j2
    dest: "{{ wireguard.config_dir }}/clients/{{ item.key }}/dynamic_dns_client.sh"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: u=rwX
    backup: true
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Generate Python DynDNS clients
  template:
    src: dyndns/dynamic_dns_client.py.j2
    dest: "{{ wireguard.config_dir }}/clients/{{ item.key }}/dynamic_dns_client.py"
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    mode: u=rwX
    backup: true
  loop: "{{ wg_configs|dict2items }}"
  when: item.key != "server"
- name: Deploy WureGuard SystemD components
  file:
    src: "wg_vpn.{{ item }}"
    dest: "/etc/systemd/system/wg_vpn.{{ item }}"
  loop:
    - path
    - service
  notify: Restart WireGuard
