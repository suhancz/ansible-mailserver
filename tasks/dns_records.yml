---
- name: Fetch already existing DNS zones
  ansible.builtin.command: "pdnsutil list-all-zones"
  become: yes
  become_user: pdns
  when: 'public_dns == "yes"'
  register: all_dns_zones
  changed_when: all_dns_zones.rc == 0
- name: Create zones
  block:
    - name: Create DNS zones
      ansible.builtin.command: "pdnsutil create-zone {{ item }} ns.{{ mailserver_domain }}"
      become: yes
      become_user: pdns
      loop: "{{ [mailserver_domain] + custom_domains + ['vpn.' ~ mailserver_domain] + ['dyndns.' ~ mailserver_domain] }}"
      when: public_dns == "yes"
      register: create_dns_zones
      changed_when: create_dns_zones.rc == 0
  rescue:
    - name: Create DNS zones
      ansible.builtin.command: "pdnsutil --force create-zone {{ item }} ns.{{ mailserver_domain }}"
      become: yes
      become_user: pdns
      loop: "{{ [mailserver_domain] + custom_domains + ['vpn.' ~ mailserver_domain] + ['dyndns.' ~ mailserver_domain] }}"
      when: reset and (public_dns == "yes")
      register: create_dns_zones
      changed_when: create_dns_zones.rc == 0
- name: Make sure local zones are master zones
  ansible.builtin.command: "pdnsutil set-kind {{ item }} primary"
  become: yes
  become_user: pdns
  loop: "{{ [mailserver_domain] + custom_domains + ['vpn.' ~ mailserver_domain] + ['dyndns.' ~ mailserver_domain] }}"
  when: public_dns == "yes"
  register: set_primary_zone
  changed_when: set_primary_zone.rc == 0
- name: Fill DNS zone
  ansible.builtin.include_tasks: fill_default_dns_records.yml
  vars:
    dns_zone: "{{ item }}"
  loop: "{{ [mailserver_domain] + custom_domains }}"
  when: public_dns == "yes" and ((reset == "yes") or (item not in all_dns_zones.stdout_lines))
- name: Create default CNAME records
  ansible.builtin.include_tasks: create_default_cname_records.yml
  vars:
    dns_zone: "{{ item }}"
  loop: "{{ [mailserver_domain] + custom_domains + ['vpn.' ~ mailserver_domain] }}"
  when: public_dns == "yes" and ((reset == "yes") or (item not in all_dns_zones.stdout_lines))
- name: Set up DNSSEC
  ansible.builtin.command: "pdnsutil secure-zone {{ item }}"
  become: yes
  become_user: pdns
  loop: "{{ [mailserver_domain] + custom_domains }}"
  when: public_dns == "yes"
  register: enable_dnssec
  ignore_errors: yes
  changed_when: enable_dnssec.rc == 0
- name: Fail if the issue is not about DNSSEC being already enabled
  ansible.builtin.fail:
    msg: "{{ item.stderr }}"
  loop: "{{ enable_dnssec.results }}"
  when: (item.rc != 0) and ("already secure, remove keys with pdnsutil remove-zone-key if needed" not in item.stderr)
- name: Count DNS records
  ansible.builtin.command: 'pdnsutil list-zone {{ item }}'
  register: zone_records
  loop: "{{ [mailserver_domain] + custom_domains + ['vpn.' ~ mailserver_domain] + ['dyndns.' ~ mailserver_domain] }}"
  changed_when: zone_records.rc == 0
- name: Correct SOA record for all domains
  ansible.builtin.command: 'pdnsutil replace-rrset {{ zone_record.item }} @ SOA 3600 "ns.{{ mailserver_domain }} hostmaster\\.{{ zone_record.item }} {{ zone_record.stdout_lines | length }} 10800 3600 604800 3600"'
  loop: "{{ zone_records.results }}"
  loop_control:
    loop_var: zone_record
  register: zone_record
  changed_when: zone_record.rc == 0
- name: Rectify all zones
  ansible.builtin.command: pdnsutil rectify-all-zones
  register: rectify_zones
  changed_when: rectify_zones.rc == 0
