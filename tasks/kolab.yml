---
- name: Setup kolab
  ansible.builtin.command: "setup-kolab --default --timezone={{ ansible_date_time.tz }} \
    --mysqlserver=unix_socket --mysqlrootpw={{ mysql_root_password }} \
    --directory-manager-pwd={{ ldap_admin_password }} --fqdn={{ mailserver_domain }} \
    --domain={{ mailserver_domain }}"
  register: kolab_setup
  failed_when: kolab_setup.rc != 0 and "existing" not in kolab_setup.stderr
  changed_when: kolab_setup.rc == 0
  tags:
    - configuration

# Disable version info
- name: Add config httpd.conf
  ansible.builtin.lineinfile:
    dest: "/etc/httpd/conf/httpd.conf"
    regexp: "^(.*){{ item.regexp }}(.*)$" 
    line: "{{ item.line }}" 
    backup: yes
  with_items:
    - { regexp: "ServerTokens", line: "ServerTokens ProductOnly" }
    - { regexp: "ServerSignature", line: "ServerSignature Off" }
    - { regexp: "SSLCipherSuite", line: "SSLCipherSuite \
      ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256" }
    - { regexp: "SSLProtocol", line: "SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1" }
    - { regexp: "SSLHonorCipherOrder", line: "SSLHonorCipherOrder on" }
    - { regexp: "SSLCompression", line: "SSLCompression off" }
  notify: 
    - Restart httpd

- name: Disable php version
  community.general.ini_file:
    path: "{{ item }}"
    section: PHP
    option: expose_php
    value: off
    mode: u=rw,go=r
    backup: true
  loop:
    - /etc/php.ini
    - /etc/opt/remi/php74/php.ini
  notify: 
    - Restart httpd
  tags:
    - configuration

- name: Configure kolab.conf
  community.general.ini_file:
    path: /etc/kolab/kolab.conf
    section: kolab
    option: "{{ item.key }}"
    value: "{{ item.value }}"
    mode: u=rw,go=r
    backup: true
  register: kolab_configure
  with_items:
    - { key: 'quota', value: '0'}
    - { key: 'partition', value: 'archive' }
    - { key: 'policy_uid', value: "'%(givenname)s'[0:1].lower()" }
    - { key: 'primary_mail', value: "'%(givenname)s'[0:1]@%(domain)s" }
    - { key: 'postfix_virtual_file', value: '/etc/postfix/virtual_alias_maps_manual.cf' }
  notify: 
    - Restart kolab
  tags:
    - configuration

# Kolab Patch for Multidomains
- name: Kolab patch download
  ansible.builtin.git:
    repo: https://github.com/suhancz/KolabScripts.git # I use my own mirror here so we're sure the upstream doesn't get lost
    dest: /usr/src/KolabScripts
    version: Kolab16
    update: yes

- name: Change kolab patch premissons
  ansible.builtin.file: 
    path: /usr/src/KolabScripts
    owner: root 
    group: root 
    mode: u=rwx,og=

- name: Initiate multi-domain
  block:
    - name: Configure IMAPD
      ansible.builtin.lineinfile: 
        dest: /etc/imapd.conf
        regexp: "^{{ item.key }}: " 
        line: "{{ item.key }}: {{ item.value}}" 
        backup: yes
      loop:
        - { key: "ldap_base", value: "dc=%2,dc=%1" }      
        - { key: "ldap_group_base", value: "dc=%2,dc=%1" }
        - { key: "ldap_member_base", value: "ou=People,dc=%2,dc=%1" }
        - { key: "ldap_domain_base_dn", value: "cn=kolab,cn=config" }
        - key: "ldap_domain_filter"
          value: "(&(objectclass=domainrelatedobject)(associateddomain=%s))"
        - { key: "ldap_domain_name_attribute", value: "associatedDomain" }
        - { key: "ldap_domain_scope", value: "sub" }
        - { key: "ldap_domain_result_attribute", value: "inetdomainbasedn" }
      register: kolab_imapd_config_patch
      notify: Restart cyrus-imapd
    - name: Restart cyrus-imapd
      when: kolab_imapd_config_patch.changed
      ansible.builtin.systemd_service:
        name: cyrus-imapd
        daemon_reload: yes
        enabled: yes
        state: restarted
    - name: Configure unique UID across domains
      community.general.ini_file:
        path: /etc/kolab/kolab.conf
        section: kolab
        option: unique_uid_across_domains
        value: "true"
        mode: u=rw,go=r
        backup: true
      notify: Restart kolab
    - name: Collect LDAP Postfix .cf files
      ansible.builtin.find:
        paths: /etc/postfix/ldap
        patterns: '*.cf'
      register: postfix_ldap_cf_files
    - name: Create custom LDAP Postfix .cf files
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ item.path | replace('.cf', '_3.cf')}}"
        remote_src: yes
        backup: true
      loop: "{{ postfix_ldap_cf_files.files }}"
      notify: Restart postfix
    - name: Set query filter in mydestination_3.cf
      ansible.builtin.lineinfile: 
        dest: /etc/postfix/ldap/mydestination_3.cf
        regexp: "^query_filter = .*$" 
        line: 'query_filter = (\&(associateddomain=%s)(associateddomain=*.*.*))'
        backup: yes
      notify: Restart postfix
    - name: "Set search base in {{ item }}"
      ansible.builtin.lineinfile: 
        dest: "{{ item.path }}"
        regexp: "^search_base = .*$" 
        line: 'search_base = dc=%2,dc=%1'
        backup: yes
      loop: "{{ postfix_ldap_cf_files.files }}"
      notify: Restart postfix
    - name: "Set domain in {{ item | replace('.cf', '_3.cf') }}"
      ansible.builtin.lineinfile: 
        dest: "{{ item.path | replace('.cf', '_3.cf') }}"
        regexp: "^domain = .*$" 
        line: 'domain = ldap:/etc/postfix/ldap/mydestination_3.cf'
        backup: yes
      loop: "{{ postfix_ldap_cf_files.files }}"
      notify: Restart postfix
    - name: Patch Postfix main.cf
      ansible.builtin.lineinfile: 
        dest: /etc/postfix/main.cf
        regexp: "^{{ item.key }} = .*$" 
        line: '{{ item.key }} = {{ item.value }}'
        backup: yes
      loop:
        - key: "transport_maps"
          value: "ldap:/etc/postfix/ldap/transport_maps.cf, \
            ldap:/etc/postfix/ldap/transport_maps_3.cf, hash:/etc/postfix/transport"
        - key: "virtual_alias_maps"
          value: "$alias_maps, ldap:/etc/postfix/ldap/virtual_alias_maps.cf, \
            hash:/etc/postfix/virtual_alias_maps_manual.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_3.cf, \
            ldap:/etc/postfix/ldap/mailenabled_distgroups_3.cf, \
            ldap:/etc/postfix/ldap/mailenabled_dynamic_distgroups_3.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_sharedfolders_3.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_mailforwarding.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_sharedfolders.cf, \
            ldap:/etc/postfix/ldap/mailenabled_distgroups.cf, \
            ldap:/etc/postfix/ldap/mailenabled_dynamic_distgroups.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_catchall.cf, \
            ldap:/etc/postfix/ldap/virtual_alias_maps_catchall_3.cf"
        - key: "local_recipient_maps"
          value: "ldap:/etc/postfix/ldap/local_recipient_maps.cf, \
            ldap:/etc/postfix/ldap/local_recipient_maps_3.cf"
      notify: Restart postfix
    - name: Set up domain aliases
      ansible.builtin.lineinfile: 
        dest: /etc/postfix/virtual_alias_maps_manual.cf
        line: '@{{ item }} @{{ mailserver_domain }}'
        backup: yes
        create: yes
      loop: "{{ custom_domains }}"
      notify: Restart postfix
    - name: Set up default mail aliases
      ansible.builtin.lineinfile:
        dest: /etc/postfix/virtual_alias_maps_manual.cf
        line: '{{ item }}@{{ mailserver_domain }} \
          {{ mailserver_admin_user }}@{{ mailserver_domain }}'
        backup: yes
        create: yes
      loop:
        - abuse
        - dmarc-reports
        - spam-report
        - ham-report
        - hostmaster
        - postmaster
        - root
        - ssl
        - vpn
        - webmaster
      notify: Restart postfix
    - name: Set up user mail aliases
      ansible.builtin.include_tasks: user_mail_alias.yml
      loop: "{{ users }}"
      loop_control:
        loop_var: user
    - name: Configure Roundcube authentication
      ansible.builtin.lineinfile:
        dest: /etc/roundcubemail/kolab_auth.inc.php
        insertafter: '=> 389,'
        line: "{{ item }}"
        backup: yes
      loop:
        - "'domain_base_dn'            => 'cn=kolab,cn=config'"
        - "'domain_filter'             => \
          '(\\&(objectclass=domainrelatedobject)(associateddomain=%s))',"
        - "'domain_name_attr'          => 'associateddomain',"
      notify: Restart kolab
    - name: Configure Roundcube organizational units
      ansible.builtin.replace:
        path: /etc/roundcubemail/kolab_auth.inc.php
        regexp: "'ou={{ item }},.*'"
        replace: "'ou={{ item }},%dc'"
        backup: yes
      loop:
        - People
        - Groups
      notify: Restart kolab
    - name: Enable freebusy for the main domain
      community.general.ini_file:
        path: /usr/share/kolab-freebusy/config/config.ini
        section: 'directory "kolab-people"'
        option: domain_base_dn
        value: "%dc"
        mode: u=rw,go=r
        backup: true
      notify: Restart kolab
    - name: Enable freebusy for all domains
      community.general.ini_file:
        path: /usr/share/kolab-freebusy/config/config.ini
        section: "{{ item }}"
        option: base_dn
        value: "%dc"
        mode: u=rw,go=r
        backup: true
      loop:
        - 'directory "kolab-people"'
        - 'directory "kolab-resources"'
        - 'directory "kolab-resource-collections"'
        - httpauth
      notify: Restart kolab
    - name: Fix global address book
      ansible.builtin.replace:
        path: /etc/roundcubemail/config.inc.php
        regexp: "'ou={{ item }},.*'"
        replace: "'ou={{ item }},%dc'"
        backup: yes
      loop:
        - People
        - Groups
      notify: Restart kolab
    - name: Configure kolab.conf
      community.general.ini_file:
        path: /etc/kolab/kolab.conf
        section: kolab_wap
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        mode: u=rw,go=r
        backup: true
      loop:
        - { key: 'memcache_hosts', value: '127.0.0.1:11211' }
        - { key: 'memcache_pconnect', value: 'true' }
      notify: Restart kolab
      
- name: Patch kolab
  ansible.builtin.command: "bash /usr/src/KolabScripts/kolab/{{ item }}"
  args:
    chdir: /usr/src/KolabScripts/kolab
  with_items:
    - initRoundcubePlugins.sh
    # - initMultiDomain.sh
    - initMailForward.sh
    - initMailCatchall.sh

- name: Configure kolab for multidomains
  ansible.builtin.lineinfile: 
    dest: "/usr/share/roundcubemail/program/localization/{{ item.lang }}/labels.inc"
    regexp: "{{ item.regexp }}" 
    line: "{{ item.line }}" 
    backup: yes
  with_items:
    - { regexp: "username", line: "$labels['username']  = 'Email';", lang: "en_US" }
    - { regexp: "username", line: "$labels['username']  = 'Email';", lang: "de_DE" }
    - { regexp: "username", line: "$labels['username']  = 'Email';", lang: "de_CH" }
    - { regexp: "username", line: "$labels['username']  = 'Email';", lang: "fr_FR" }
    - { regexp: "username", line: "$labels['username']  = 'Email';", lang: "it_IT" }
  notify: 
    - Restart kolab

- name: Render Kolab web config templates
  tags:
    - kolab
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - src: "httpd/kolab.conf.j2"
      dest: "/etc/httpd/conf.d/993-kolab.{{ mailserver_domain }}.conf"
    - src: "httpd/kolab-le-ssl.conf.j2"
      dest: "/etc/httpd/conf.d/993-kolab.{{ mailserver_domain }}-le-ssl.conf"
  notify: Restart httpd

- name: Enable domains
  tags:
    - configuration
  block:
    - name: Check domains list
      ansible.builtin.command: "kolab list-domains"
      register: kolab_domains_list

    - name: Add Domain
      ansible.builtin.command: "kolab add-domain {{ item }}"
      loop:
        - "{{ [mailserver_domain] + custom_domains }}"
      when: item is defined and item not in kolab_domains_list.stdout
    - name: Configure primary mail
      community.general.ini_file:
        path: /etc/kolab/kolab.conf
        section: "{{ item }}"
        option: primary_mail
        value: "'%(givenname)s'[0:1]@%(domain)s"
        mode: u=rw,go=r
        backup: true
      loop:
        - "{{ [mailserver_domain] + custom_domains }}"
      notify: 
        - Restart kolab
    - name: Set timestamp format
      community.general.ini_file:
        path: /etc/kolab/kolab.conf
        section: ldap
        option: modifytimestamp_format
        value: "%%Y%%m%%d%%H%%M%%SZ"
        mode: u=rw,go=r
        backup: true
    - name: Set IMAP virtual domains
      community.general.ini_file:
        path: /etc/kolab/kolab.conf
        section: imap
        option: virtual_domains
        value: userid
        mode: u=rw,go=r
        backup: true
- name: Restart kolab
  ansible.builtin.systemd_service:
    name: "{{ kolab_service }}"
    daemon_reload: yes
    enabled: yes
    state: restarted
  loop:
    - kolabd
    - kolab-saslauthd
  loop_control:
    loop_var: kolab_service
