---
- name: Configure OpenDMARC
  ansible.builtin.lineinfile:
    regexp: '\b{{ item.key }}\b'
    line: "{{ '#' if item.comment }}{{ item.key }}    {{ item.value }}"
    path: /etc/opendmarc.conf
    mode: u=rw,og=r
    owner: root
    group: root
    state: present
    backup: yes
  loop:
    - { key: "AuthservID", value: "OpenDMARC", comment: false }
    - key: "TrustedAuthservIDs"
      # noqa jinja[spacing] brackets here are as an empty list
      value: >
        {%- set domains = [mailserver_domain] %}
        {%- for domain in custom_domains | default([]) %}
        {%- set domains = domains.append( domain ) %}
        {%- endfor %}
        {{- domains | join(',') -}}
      comment: false
    - { key: "IgnoreAuthenticatedClients", value: "true", comment: false }
    - { key: "RejectFailures", value: "true", comment: false }
    - { key: "RequiredHeaders", value: "true", comment: false }
    - { key: "SPFIgnoreResults", value: "false", comment: false }
    - { key: "SPFSelfValidate", value: "true", comment: false }
    - { key: "IgnoreMailFrom", value: "{{ undeliverable_exceptions | join(',') }}", comment: false }
  notify: Restart opendmarc
- name: Set up DMARC TXT records
  ansible.builtin.include_tasks: add_dns_record.yml
  vars:
    record:
      zone: "{{ item }}"
      name: "_dmarc"
      ttl: "3600"
      type: TXT
      content: "v=DMARC1; p=none; pct=100; rua=mailto:dmarc-reports@{{ item }}; ruf=mailto:dmarc-reports@{{ item }}"
  when: 'public_dns == "yes"'
  loop: "{{ [mailserver_domain] + custom_domains }}"
- name: Reload PowerDNS config
  ansible.builtin.systemd_service:
    name: pdns
    daemon_reload: yes
    enabled: yes
    state: restarted
  when: 'public_dns == "yes"'
- name: Wait for DNS to listen
  ansible.builtin.wait_for:
    port: 53 # noqa var-naming[no-reserved] we refer to a port here, so I call it a port
