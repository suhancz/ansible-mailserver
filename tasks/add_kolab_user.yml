---
- name: Authenticate against the Kolab API
  when: (kolab_api_auth is not defined) or (kolab_api_auth.cookies_string is not defined) or (kolab_api_auth.cookies_string | length == 0)
  ansible.builtin.include_tasks: kolab_auth.yml
  # TODO: Figure how to store auth tokens
- name: "Find Kolab user with e-mail {{ user.name ~ '@' ~ mailserver_domain }}"
  ansible.builtin.uri:
    url: "https://kolab.{{ mailserver_domain }}/kolab-webadmin/api/user.find"
    method: GET
    body_format: json
    body:
      mail: "{{ user.name }}@{{ mailserver_domain }}"
      session_token: "{{ kolab_api_auth.json.result.session_token }}"
    return_content: true
    headers:
      Cookie: "{{ kolab_api_auth.cookies_string }}"
  register: kolab_user_found
  failed_when: kolab_user_found.json.status != 'OK' and kolab_user_found.json.result | length > 0
  changed_when: kolab_user_found.json.status == 'OK' and kolab_user_found.json.result | length == 0
  no_log: true
- name: Display Kolab user find results
  ansible.builtin.debug:
    var: kolab_user_found.json.result
- name: Find user types
  ansible.builtin.uri:
    url: "https://kolab.{{ mailserver_domain }}/kolab-webadmin/api/user_types.list"
    method: GET
    body_format: json
    return_content: true
    body:
      session_token: "{{ kolab_api_auth.json.result.session_token }}"
    headers:
      Cookie: "{{ kolab_api_auth.cookies_string }}"
  register: kolab_user_types
  failed_when: kolab_user_types.json.status != 'OK'
- name: Display Kolab domain types
  # TODO: find the right user types
  ansible.builtin.debug:
    var: kolab_user_types.json.result
- name: "Add Kolab user {{ user.name }}"
  # TODO: find the needed variables
  when: not kolab_user_found.changed
  ansible.builtin.uri:
    url: "https://kolab.{{ mailserver_domain }}/kolab-webadmin/api/user.add"
    method: GET
    body_format: json
    body:
      object_type: user
      type_id:
      givenname: "{{ user.name }}"
      sn:
      userPassword: "{{ user.password }}"
      session_token: "{{ kolab_api_auth.json.result.session_token }}"
    return_content: true
    headers:
      Cookie: "{{ kolab_api_auth.cookies_string }}"
  register: kolab_user_add
  failed_when: kolab_user_add.json.status != 'OK'
  # no_log: true
- name: "Update Kolab user {{ user.name }}"
  # TODO: find the needed variables
  when: kolab_user_found.changed
  ansible.builtin.uri:
    url: "https://kolab.{{ mailserver_domain }}/kolab-webadmin/api/user.edit"
    method: GET
    body_format: json
    body:
      object_type: user
      type_id:
      givenname: "{{ user.name }}"
      sn:
      userPassword: "{{ user.password }}"
      session_token: "{{ kolab_api_auth.json.result.session_token }}"
    return_content: true
    headers:
      Cookie: "{{ kolab_api_auth.cookies_string }}"
  register: kolab_user_edit
  failed_when: kolab_user_edit.json.status != 'OK'
  # no_log: true
