---
- name: Create backup directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: u=rwX
  loop:
    - /backup
    - /backup/mariadb
    - /backup/ldap
    - /backup/opendkim
    - /backup/opendmarc
    - /backup/vsftpd
    - /backup/ssl
    - /backup/kolab
    - /backup/cyrus-imap
    - /backup/postfix
    - /backup/pdns
    - /var/www/webdav/.backup
- name: BindFS mount the backup directory to WebDav
  ansible.posix.mount:
    path: /var/www/webdav/.backup
    src: /backup
    opts: map=root/apache:@root/@apache,perms=u=rwX:g=rwX,
    state: mounted
    fstype: fuse.bindfs
- name: Create systemd tarball backup services
  ansible.builtin.template:
    src: "systemd/tarball-backup.service.j2"
    dest: "/etc/systemd/system/{{ item.name }}-backup.service"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - { name: "opendkim", paths: ["/etc/opendkim", "/etc/opendkim.conf"], service: True }
    - { name: "opendmarc", paths: ["/etc/opendmarc", "/etc/opendmarc.conf"], service: True }
    - { name: "kolab", paths: ["/etc/kolab"] }
    - { name: "cyrus-imap", paths: ["/etc/imap"] }
    - { name: "cyrus-imap", paths: ["/etc/cyrus-imap"], service: True }
    # - { name: "postfix", paths: ["/etc/postfix", "/etc/mail/postfixadmin", "/var/vmail"], service: True }
    - { name: "postfix", paths: ["/etc/postfix", "/var/vmail"], service: True }
    - { name: "ssl", paths: ["/etc/letsencrypt"] }
    - { name: "pdns", paths: ["/etc/pdns", "/etc/pdns-recursor", "/etc/dnsdist"], service: True }
    - { name: "wg_vpn", paths: ["/etc/wireguard"], service: True }
- name: Create systemd backup services
  ansible.builtin.template:
    src: "systemd/{{ item }}-backup.service.j2"
    dest: "/etc/systemd/system/{{ item }}-backup.service"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - mariadb
    - ldap
    - vsftpd
- name: Create systemd backup timers
  ansible.builtin.template:
    src: "systemd/backup.timer.j2"
    dest: "/etc/systemd/system/{{ item }}-backup.timer"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - kolab
    - cyrus-imap
    - postfix
    - pdns
    - wg_vpn
- name: Ensure systemd is aware of the backup services
  ansible.builtin.systemd_service:
    name: "{{ item }}-backup"
    daemon_reload: yes
    enabled: no
    state: stopped
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - kolab
    - cyrus-imap
    - postfix
    - pdns
    - wg_vpn
- name: Enable the backup timers
  ansible.builtin.systemd_service:
    name: "{{ item }}-backup.timer"
    daemon_reload: yes
    enabled: yes
    state: started
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - kolab
    - cyrus-imap
    - postfix
    - pdns
    - wg_vpn
- name: Restore backups
  tags: restore
  when: mariadb_backup_path is defined or ldap_backup_path is defined or opendkim_backup_path is defined or opendmarc_backup_path is defined or vsftpd_backup_path is defined or ssl_backup_path is defined or kolab_backup_path is defined or cyrus-imap_backup_path is defined or postfix_backup_path is defined or pdns_backup_path is defined or wg_vpn_backup_path is defined
  block:
    - name: Prepare MariaDB backup
      when: mariadb_backup_path is defined
      ansible.builtin.command: "mariabackup --prepare --target-dir={{ mariadb_backup_path }}"
      register: prepare_mariabackup
      changed_when: prepare_mariabackup.rc == 0
    - name: Stop MariaDB
      when: mariadb_backup_path is defined
      ansible.builtin.systemd_service:
        name: mariadb
        state: stopped
    - name: Erase data directory
      when: mariadb_backup_path is defined
      ansible.builtin.file:
        path: /var/lib/mysql
        state: absent
    - name: Create data directory
      when: mariadb_backup_path is defined
      ansible.builtin.file:
        path: /var/lib/mysql
        state: directory
        owner: mysql
        group: mysql
        mode: u=rwx,go=rx
    - name: Restore MariaDB backup
      when: mariadb_backup_path is defined
      ansible.builtin.command: "mariabackup --copy-back --target-dir={{ mariadb_backup_path }}"
      register: restore_mariabackup
      changed_when: restore_mariabackup.rc == 0
    - name: Ensure data directory permissions
      when: mariadb_backup_path is defined
      ansible.builtin.file:
        path: /var/lib/mysql
        state: directory
        owner: mysql
        group: mysql
        recurse: yes
    - name: Start MariaDB
      when: mariadb_backup_path is defined
      ansible.builtin.systemd_service:
        name: mariadb
        state: started
    - name: Stop LDAP server
      when: ldap_backup_path is defined
      ansible.builtin.command: "dsctl {{ mailserver_domain.split('.')[0] }} stop"
      # ansible.builtin.command: "dsctl {{ mailserver_hostname }} stop"
      register: stop_ldap_server
      changed_when: stop_ldap_server.rc == 0
    - name: Prepare LDAP backup
      when: ldap_backup_path is defined
      ansible.builtin.unarchive:
        src: "{{ ldap_backup_path }}"
        dest: /
        list_files: yes
        remote_src: yes
      register: ldap_backup_files
    - name: Restore LDAP backup
      when: ldap_backup_path is defined
      ansible.builtin.command: "dsctl {{ mailserver_domain.split('.')[0] }} bak2db /{{ ldap_backup_files.files[0] }}"
      # ansible.builtin.command: "dsctl {{ mailserver_hostname }} bak2db /{{ ldap_backup_files.files[0] }}"
      register: restore_ldap_server
      changed_when: restore_ldap_server.rc == 0
    - name: Start LDAP server
      when: ldap_backup_path is defined
      ansible.builtin.command: "dsctl {{ mailserver_domain.split('.')[0] }} start"
      # ansible.builtin.command: "dsctl {{ mailserver_hostname }} start"
      register: start_ldap_server
      changed_when: start_ldap_server.rc == 0
    - name: Restore service tarball backups
      ansible.builtin.include_tasks: restore_service_tarball_backup.yml
      vars:
        service: "{{ item }}"
        service_backup_path: "{{ vars[item ~ '_backup_path'] }}"
      when: vars[item ~ '_backup_path'] is defined
      loop:
        - opendkim
        - opendmarc
        - vsftpd
        - kolab
        - cyrus-imap
        - postfix
        - pdns
        - wg_vpn
    - name: Restore non-service tarball backups
      when: vars[item ~ '_backup_path'] is defined
      ansible.builtin.unarchive:
        src: "{{ vars[item ~ '_backup_path'] }}"
        dest: /
        remote_src: yes
      loop:
        - ssl
