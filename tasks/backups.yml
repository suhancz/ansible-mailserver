- name: Create backup directories
  file:
    path: "/backup/{{ item }}"
    state: directory
    recurse: yes
    owner: root
    group: root
    mode: u=rwX
  loop:
    - ''
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - horde
    - dovecot
    - postfix
    - dnsmasq
- name: Create systemd tarball backup services
  template:
    src: "systemd/tarball-backup.service.j2"
    dest: "/etc/systemd/system/{{ item.name }}-backup.service"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - { name: "opendkim", paths: ["/etc/opendkim", "/etc/opendkim.conf"], service: True }
    - { name: "opendmarc", paths: ["/etc/opendmarc", "/etc/opendmarc.conf"], service: True }
    - { name: "horde", paths: ["/etc/horde"] }
    - { name: "dovecot", paths: ["/etc/dovecot"], service: True }
    - { name: "postfix", paths: ["/etc/postfix", "/etc/mail/postfixadmin", "/var/vmail"], service: True }
    - { name: "ssl", paths: ["/etc/letsencrypt"] }
    - { name: "dnsmasq", paths: ["/etc/dnsmasq"] }
- name: Create systemd backup services
  template:
    src: "systemd/{{ item }}-backup.service.j2"
    dest: "/etc/systemd/system/{{ item }}-backup.service"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - mariadb
    - ldap
    - vsftpd
- name: Create systemd backup timers
  template:
    src: "systemd/backup.timer.j2"
    dest: "/etc/systemd/system/{{ item }}-backup.timer"
    mode: u=rw,og=r
    owner: root
    group: root
    backup: yes
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - horde
    - dovecot
    - postfix
    - dnsmasq
- name: Ensure systemd is aware of the backup services
  systemd:
    name: "{{ item }}-backup"
    daemon_reload: yes
    enabled: no
    state: stopped
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - horde
    - dovecot
    - postfix
    - dnsmasq
- name: Enable the backup timers
  systemd:
    name: "{{ item }}-backup.timer"
    daemon_reload: yes
    enabled: yes
    state: started
  loop:
    - mariadb
    - ldap
    - opendkim
    - opendmarc
    - vsftpd
    - ssl
    - horde
    - dovecot
    - postfix
    - dnsmasq
- name: Restore backups
  when: mariadb_backup_path is defined or ldap_backup_path is defined or opendkim_backup_path is defined or opendmarc_backup_path is defined or vsftpd_backup_path is defined or ssl_backup_path is defined or horde_backup_path is defined or dovecot_backup_path is defined or postfix_backup_path is defined or dnsmasq_backup_path is defined
  block:
    - name: Prepare MariaDB backup
      when: mariadb_backup_path is defined
      command: "mariabackup --prepare --target-dir={{ mariadb_backup_path }}"
    - name: Stop MariaDB
      when: mariadb_backup_path is defined
      systemd:
        name: mariadb
        state: stopped
    - name: Erase data directory
      when: mariadb_backup_path is defined
      file:
        path: /var/lib/mysql
        state: absent
    - name: Create data directory
      when: mariadb_backup_path is defined
      file:
        path: /var/lib/mysql
        state: directory
        owner: mysql
        group: mysql
        mode: u=rwx,go=rx
    - name: Restore MariaDB backup
      when: mariadb_backup_path is defined
      command: "mariabackup --copy-back --target-dir={{ mariadb_backup_path }}"
    - name: Ensure data directory permissions
      when: mariadb_backup_path is defined
      file:
        path: /var/lib/mysql
        state: directory
        owner: mysql
        group: mysql
        recurse: yes
    - name: Start MariaDB
      when: mariadb_backup_path is defined
      systemd:
        name: mariadb
        state: started
    - name: Stop LDAP server
      when: ldap_backup_path is defined
      command: "dsctl {{ mailserver_hostname.split('.')[0] }} stop"
    - name: Prepare LDAP backup
      when: ldap_backup_path is defined
      unarchive:
        src: "{{ ldap_backup_path }}"
        dest: /
        list_files: yes
        remote_src: yes
      register: ldap_backup_files
    - name: Restore LDAP backup
      when: ldap_backup_path is defined
      command: "dsctl {{ mailserver_hostname.split('.')[0] }} bak2db /{{ ldap_backup_files.files[0] }}"
    - name: Start LDAP server
      when: ldap_backup_path is defined
      command: "dsctl {{ mailserver_hostname.split('.')[0] }} start"
    - name: Restore service tarball backups
      include: restore_service_tarball_backup.yml
      vars:
        service: "{{ item }}"
        service_backup_path: "{{ item + '_backup_path' }}"
      when: "{{ item + '_backup_path' is defined }}"
      loop:
        - opendkim
        - opendmarc
        - vsftpd
        - dovecot
        - postfix
        - dnsmasq
    - name: Restore non-service tarball backups
      when: "{{ item + '_backup_path'  is defined }}"
      unarchive:
        src: "{{ item + '_backup_path' }}"
        dest: /
        remote_src: yes
      loop:
        - horde
        - ssl
