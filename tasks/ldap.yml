---
# - name: Open firewall
#   ansible.builtin.import_tasks: firewall.yml
#   vars:
#     port: "{{ item }}" # noqa var-naming[no-reserved] we refer to a port here, so I call it a port
#   loop:
#     - ldap
#     - ldaps
# - name: Add ldap group
#   group:
#     name: ldap
#     system: yes
#     gid: 55
# - name: Add ldap user
#   ansible.builtin.user:
#     name: ldap
#     group: ldap
#     create_home: yes
#     system: yes
#     uid: 55
#     home: /var/lib/openldap
#     shell: /usr/sbin/nologin
- name: Render dscreate config template
  ansible.builtin.template:
    src: "ldap/389.dscreate.conf.j2"
    dest: "/tmp/ansible-mailserver-install.dscreate.conf"
    mode: u=rw
    owner: root
    group: root
    backup: yes
  notify: "Restart dirsrv@{{ mailserver_hostname }}"
- name: Apply LDAP server configuration
  block:
    - name: Configure LDAP server
      ansible.builtin.command: dscreate from-file /tmp/ansible-mailserver-install.dscreate.conf
      register: dscreate_status
      changed_when: dscreate_status.rc == 0
  rescue:
    - name: Start LDAP server
      ansible.builtin.command: "dsctl {{ mailserver_hostname }} start"
      register: start_ldap_server
      changed_when: start_ldap_server.rc == 0
      when: reset == "yes"
    - name: Create backup before taking destructive actions
      ansible.builtin.command: "dsconf {{ mailserver_hostname }} backup create"
      when: reset == "yes"
      register: backup_ldap_server
      changed_when: backup_ldap_server.rc == 0
    - name: List LDAP server backups
      ansible.builtin.command: "dsctl {{ mailserver_hostname }} backups"
      register: ldap_backups
      when: reset == "yes"
      changed_when: ldap_backups.rc == 0
    - name: Create backup directory
      ansible.builtin.file:
        path: "/backup/{{ item }}"
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: u=rwX
      when: reset == "yes"
      loop:
        - ''
        - ldap
    - name: Save last LDAP backup
      archive:
        path: "{{ (ldap_backups.stdout_lines | last).split(' ')[1] }}"
        dest: "/backup/ldap/LDAP_backup.{{ (ldap_backups.stdout_lines | last).split(' ')[1].split('/') | last }}.tar.bz2"
        owner: root
        group: root
        mode: u=rw
        format: bz2
        force_archive: yes
      when: reset == "yes"
    - name: Uninstall LDAP server
      ansible.builtin.command: "dsctl {{ mailserver_hostname }} remove --do-it"
      when: reset == "yes"
      register: uninstall_ldap_server
      changed_when: uninstall_ldap_server.rc == 0
    - name: Configure LDAP server
      ansible.builtin.command: dscreate from-file /tmp/ansible-mailserver-install.dscreate.conf
      when: reset == "yes"
      register: dscreate_status
      changed_when: dscreate_status.rc == 0
- name: Start LDAP server
  ansible.builtin.command: "dsctl {{ mailserver_hostname }} start"
  register: start_ldap_server
  changed_when: start_ldap_server.rc == 0
- name: Import TLS certificate for LDAP
  ansible.builtin.command: "dsctl {{ mailserver_hostname }} tls import-server-key-cert /etc/letsencrypt/live/{{ mailserver_domain }}/cert.pem /etc/letsencrypt/certificates/{{ mailserver_domain }}.key"
  register: import_ldap_cert
  changed_when: import_ldap_cert.rc == 0
- name: Enable LDAP plugins
  ansible.builtin.command: "dsconf {{ mailserver_hostname }} plugin {{ item }} enable"
  loop:
    - memberof
    - automember
  register: enable_ldap_plugin
  changed_when: item.rc == 0
- name: Configure the memberof plugin to search all entries
  ansible.builtin.command: "dsconf {{ mailserver_hostname }} plugin memberof set --scope dc={{ mailserver_domain.split('.') | join(',dc=') }}"
  register: enable_ldap_memberof_plugin
  changed_when: enable_ldap_memberof_plugin.rc == 0
  when: "dscreate_status is defined and dscreate_status.rc is defined and dscreate_status.rc == 0"
