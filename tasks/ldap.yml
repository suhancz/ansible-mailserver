---
# - name: Open firewall
#   import_tasks: firewall.yml
#   vars:
#     port: "{{ item }}"
#   loop:
#     - ldap
#     - ldaps
# - name: Add ldap group
#   group:
#     name: ldap
#     system: yes
#     gid: 55
# - name: Add ldap user
#   user:
#     name: ldap
#     group: ldap
#     create_home: yes
#     system: yes
#     uid: 55
#     home: /var/lib/openldap
#     shell: /usr/sbin/nologin
- name: Render dscreate config template
  template:
    src: "ldap/389.dscreate.conf.j2"
    dest: "/tmp/ansible-mailserver-install.dscreate.conf"
    mode: u=rw
    owner: root
    group: root
    backup: yes
  notify: "Restart dirsrv@{{ mailserver_hostname }}"
- name: Apply LDAP server configuration
  block:
    - name: Configure LDAP server
      command: dscreate from-file /tmp/ansible-mailserver-install.dscreate.conf
      register: dscreate_status
  rescue:
    - name: Start LDAP server
      command: "dsctl {{ mailserver_hostname }} start"
      when: reset == "yes"
    - name: Create backup before taking destructive actions
      command: "dsconf {{ mailserver_hostname }} backup create"
      when: reset == "yes"
    - name: List LDAP server backups
      command: "dsctl {{ mailserver_hostname }} backups"
      register: ldap_backups
      when: reset == "yes"
    - name: Create backup directory
      file:
        path: "/backup/{{ item }}"
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: u=rwX
      when: reset == "yes"
      loop:
        - ''
        - ldap
    - name: Save last LDAP backup
      archive:
        path: "{{ (ldap_backups.stdout_lines|last).split(' ')[1] }}"
        dest: "/backup/ldap/LDAP_backup.{{ (ldap_backups.stdout_lines|last).split(' ')[1].split('/')|last }}.tar.bz2"
        format: bz2
        force_archive: yes
      when: reset == "yes"
    - name: Uninstall LDAP server
      command: "dsctl {{ mailserver_hostname }} remove --do-it"
      when: reset == "yes"
    - name: Configure LDAP server
      command: dscreate from-file /tmp/ansible-mailserver-install.dscreate.conf
      when: reset == "yes"
      register: dscreate_status
- name: Start LDAP server
  command: "dsctl {{ mailserver_hostname }} start"
- name: Import TLS certificate for LDAP
  command: "dsctl {{ mailserver_hostname }} tls import-server-key-cert /etc/letsencrypt/live/{{ mailserver_domain }}/cert.pem /etc/letsencrypt/certificates/{{ mailserver_domain }}.key"
- name: Enable LDAP plugins
  command: "dsconf {{ mailserver_hostname }} plugin {{ item }} enable"
  loop:
    - memberof
    - automember
- name: Configure the memberof plugin to search all entries
  command: "dsconf {{ mailserver_hostname }} plugin memberof set --scope dc={{ mailserver_domain.split('.')|join(',dc=') }}"
  when: "dscreate_status is defined and dscreate_status.rc is defined and dscreate_status.rc == 0"
