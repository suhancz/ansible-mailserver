- name: Open firewall
  include: firewall.yml
  vars:
    port: dns
  when: 'public_dns == "yes"'
- name: Configure local DNS cache
  nmcli:
    conn_name: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
    ip4: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    ip6: "{{ hostvars[inventory_hostname]['ansible_default_ipv6']['address'] }}"
    dns4:
      - 127.0.0.1
      - 8.8.8.8
      - 1.1.1.1
    state: present
    type: ethernet
- name: Create PowerDNS DB
  include_tasks: create_mariadb_schema.yml
  vars:
    mariadb_database: powerdnsdb
    mariadb_state: "{{ ('import' if reset)|default('present') }}"
  register: powerdns_db_state
- name: Set up PowerDNS DB privileges
  mysql_user:
    name: powerdns
    password: '{{ powerdns_db_password }}'
    priv: 'powerdnsdb.*:ALL'
    host: localhost
    login_user: root
    login_password: "{{ mysql_root_password }}"
  no_log: yes
# - name: Fill PowerDNS DB with data
#   include_tasks: fill_mariadb_data.yml
#   vars:
#     mariadb_database:
#       db: powerdnsdb
#       user: powerdns
#       password: "{{ powerdns_db_password }}"
#   when: powerdns_db_state.changed
- name: Configure PowerDNS authoritative server
  lineinfile:
    path: /etc/pdns/pdns.conf
    line: "{{ item.key }}={{ item.value }}"
    regex: "^{{ item.key }}"
    state: present
    owner: pdns
    group: pdns
    backup: yes
  loop:
    - { key: "launch", value: "gmysql" }
    - { key: "gmysql-host", value: "localhost" }
    - { key: "gmysql-user", value: "powerdns" }
    - { key: "gmysql-password", value: "{{ powerdns_db_password }}" }
    - { key: "gmysql-dbname", value: "powerdnsdb" }
    - { key: "dnsupdate", value: "yes" }
    - { key: "local-address", value: "127.0.0.1" }
    - { key: "local-port", value: "5300" }
    - { key: "gmysql-dnssec", value: "yes" }
  no_log: yes
  when: 'public_dns == "yes"'
- name: Fetch already existing DNS zones
  command: "pdnsutil list-all-zones"
  become: yes
  become_user: pdns
  when: 'public_dns == "yes"'
  register: all_dns_zones
- name: Create zones
  block:
    - name: Create DNS zones
      command: "pdnsutil create-zone {{ item }} ns.{{ item }}"
      become: yes
      become_user: pdns
      loop: "{{ [mailserver_domain] + custom_domains }}"
      when: 'public_dns == "yes"'
  rescue:
    - name: Create DNS zones
      command: "pdnsutil --force create-zone {{ item }} ns.{{ item }}"
      become: yes
      become_user: pdns
      loop: "{{ [mailserver_domain] + custom_domains }}"
      when: 'reset and public_dns == "yes"'
- name: Render DNS zone file
  template:
    src: pdns/dns-domain.zone.j2
    dest: "/tmp/ansible-mailserver.dns-{{ item }}.zone"
    owner: pdns
    group: pdns
    backup: yes
  when: 'public_dns == "yes"'
  loop: "{{ [mailserver_domain] + custom_domains }}"
- name: Save current DNS zone to the result file
  shell: 'pdnsutil list-zone {{ item }} | sed -e "s/a.misconfigured.dns.server.invalid/ns.{{ item }}/g" | sort | uniq >> /tmp/ansible-mailserver.dns-{{ item }}.zone'
  loop: "{{ [mailserver_domain] + custom_domains }}"
- name: Fill DNS zone
  command: "pdnsutil load-zone {{ item }} /tmp/ansible-mailserver.dns-{{ item }}.zone"
  become: yes
  become_user: pdns
  loop: "{{ [mailserver_domain] + custom_domains }}"
  when: '{{ public_dns == "yes" and ((reset == "yes") or (item not in all_dns_zones.stdout_lines)) }}'
- name: Set up DNSSEC
  command: "pdnsutil secure-zone {{ item }}"
  become: yes
  become_user: pdns
  loop: "{{ [mailserver_domain] + custom_domains }}"
  when: public_dns == "yes"
  register: enable_dnssec
  ignore_errors: yes
- name: Fail if the issue is not about DNSSEC being already enabled
  fail:
    msg: "{{ item.stderr }}"
  loop: "{{ enable_dnssec.results }}"
  when: '{{ (item.rc != 0) and ("already secure, remove keys with pdnsutil remove-zone-key if needed" not in item.stderr) }}'
- name: Configure PowerDNS recursor
  lineinfile:
    path: /etc/pdns-recursor/recursor.conf
    line: "{{ item.key }}={{ item.value }}"
    regex: "^{{ item.key }}"
    state: present
    owner: pdns-recursor
    group: pdns-recursor
    backup: yes
  loop:
    - { key: "local-address", value: "127.0.0.1" }
    - { key: "local-port", value: "5301" }
    - { key: "forward-zones", value: "{{ mailserver_domain }}=127.0.0.1:5300" }
  no_log: yes
  when: 'public_dns == "yes"'
- name: Configure PowerDNS recursor to forward custom domains
  lineinfile:
    path: /etc/pdns-recursor/recursor.conf
    line: "forward-zones+={{ item }}=127.0.0.1:5300"
    state: present
    backup: yes
  loop: "{{ custom_domains }}"
  no_log: yes
  when: 'public_dns == "yes"'
- name: Configure DNSDist
  template:
    src: dnsdist/dnsdist.conf.j2
    dest: /etc/dnsdist/dnsdist.conf
    backup: yes
  when: 'public_dns == "yes"'
- name: Make sure PowerDNS is running
  systemd:
    name: pdns
    daemon_reload: yes
    enabled: yes
    state: restarted
  when: 'public_dns == "yes"'
- name: Make sure PowerDNS recursor is running
  systemd:
    name: pdns-recursor
    daemon_reload: yes
    enabled: yes
    state: restarted
- name: Make DNSDist is running
  systemd:
    name: dnsdist
    daemon_reload: yes
    enabled: yes
    state: restarted
  when: 'public_dns == "yes"'
- name: Get latest PowerAdmin version
  block:
    - name: Get URL for latest release
      uri:
        url: https://github.com/poweradmin/poweradmin/releases/latest
      register: poweradmin_download_site
    - name: Parse version
      set_fact:
        poweradmin_version: "{{ poweradmin_download_site.url | replace('https://github.com/poweradmin/poweradmin/releases/tag/v','') }}"
  when: 'public_dns == "yes"'
- name: Unpack PowerAdmin
  unarchive:
    src: "https://github.com/poweradmin/poweradmin/archive/v{{ poweradmin_version }}.tar.gz"
    dest: /var/www/
    remote_src: yes
  when: 'public_dns == "yes"'
- name: Rename PowerAdmin directory
  command: "mv /var/www/poweradmin-{{ poweradmin_version }} /var/www/poweradmin"
  args:
    creates: /var/www/poweradmin
  when: 'public_dns == "yes"'
- name: Set up PowerAdmin permissions
  file:
    path: /var/www/poweradmin
    state: directory
    owner: apache
    group: apache
    recurse: yes
  when: 'public_dns == "yes"'
- name: Generate PowerAdmin session key
  set_fact:
    poweradmin_session_key: "{{ poweradmin_session_key | default(lookup('password', '/tmp/ansible-mailserver-install.poweradmin_session_key chars=ascii_lowercase,ascii_uppercase,digits,@,#,$,%,^,*,(,),_,-,! length=46')) }}"
  no_log: yes
  when: 'public_dns == "yes"'
- name: "Add PowerAdmin user"
  mysql_user:
    name: '{{ mailserver_admin_user }}@{{ mailserver_domain }}'
    password: '{% for user in users %}{% if user.name == mailserver_admin_user %}{{ user.password }}{% endif %}{% endfor %}'
    priv: 'powerdnsdb.*:SELECT,INSERT,UPDATE,DELETE'
    host: localhost
    login_user: root
    login_password: '{{ mysql_root_password }}'
  no_log: yes
  when: 'public_dns == "yes"'
- name: Check if DynDNS .htaccess exists
  stat:
    path: /var/www/poweradmin/.htaccess
  register: htaccess_exists
- name: Set up DynDNS .htaccess
  copy:
    src: /var/www/poweradmin/install/htaccess.dist
    dest: /var/www/poweradmin/.htaccess
    remote_src: yes
    owner: apache
    group: apache
    mode: ug=rw,o=r
  when: 'public_dns == "yes" and not htaccess_exists.stat.exists'
- name: Render PowerAdmin config
  template:
    src: poweradmin/config.inc.php.j2
    dest: /var/www/poweradmin/inc/config.inc.php
    mode: ug=rw,o=r
    owner: apache
    group: apache
    backup: yes
  no_log: yes
  when: 'public_dns == "yes"'
- name: Remove install directory
  file:
    path: /var/www/poweradmin/install/
    state: absent
  when: 'public_dns == "yes"'
- name: Create resolved.conf.d directory
  file:
    path: /etc/systemd/resolved.conf.d
    state: directory
    owner: root
    group: root
    mode: u=rwX,og=rX
- name: Enable local DNS caching
  blockinfile:
    path: /etc/systemd/resolved.conf.d/LocalDNSCache.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK Local DNS cache"
    block: |
      [Resolve]
      Cache=yes
      # CacheFromLocalhost=yes
      Domains={% for custom_domain in [mailserver_domain] + custom_domains %}{{ custom_domain }} {% if loop.index != loop.length %} {% endif %}{% endfor %}
      DNS=127.0.0.1 8.8.8.8 1.1.1.1
      DNSStubListener=No
    mode: u=rw,og=r
    owner: root
    group: root
    state: present
    backup: yes
    create: yes
- name: Make sure resolved is running
  systemd:
    name: systemd-resolved
    daemon_reload: yes
    enabled: yes
    state: restarted
